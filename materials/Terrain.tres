[gd_resource type="ShaderMaterial" load_steps=9 format=2]

[ext_resource path="res://terrain/tint.webp" type="Texture" id=1]

[sub_resource type="Shader" id=12]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.2.stable.mono's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform sampler2D texture_normalmap;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D tint;
uniform sampler2D second_noise;

varying vec3 model_vertex;
varying vec3 model_normal;

varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	
	//UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	model_vertex = VERTEX;
	model_normal = NORMAL;
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos * 10.0);
	
	
	
	ALBEDO = albedo.rgb * albedo_tex.rgb * model_normal.y * texture(tint, base_uv).rgb * texture(second_noise,base_uv * 3.0).rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	
	NORMALMAP = triplanar_texture(texture_normalmap,uv1_power_normal,uv1_triplanar_pos * 10.0).rgb;
}
"

[sub_resource type="OpenSimplexNoise" id=13]
seed = 1000

[sub_resource type="NoiseTexture" id=14]
width = 1024
height = 1024
seamless = true
noise = SubResource( 13 )

[sub_resource type="OpenSimplexNoise" id=17]

[sub_resource type="NoiseTexture" id=18]
width = 1024
height = 1024
seamless = true
noise = SubResource( 17 )

[sub_resource type="OpenSimplexNoise" id=15]

[sub_resource type="NoiseTexture" id=16]
width = 1024
height = 1024
as_normalmap = true
bump_strength = 27.2
noise = SubResource( 15 )

[resource]
shader = SubResource( 12 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 20, 20, 20 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/uv1_blend_sharpness = 1.0
shader_param/texture_albedo = SubResource( 18 )
shader_param/texture_normalmap = SubResource( 16 )
shader_param/tint = ExtResource( 1 )
shader_param/second_noise = SubResource( 14 )
